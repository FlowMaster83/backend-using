{"mappings":"AA6IM,MAAAA,EAAUC,SAASC,cAAc,WACjCC,EAAYF,SAASC,cAAc,aACnCE,EAAcH,SAASC,cAAc,YACrCG,EAAaJ,SAASC,cAAc,aAgB1C,SAASI,EAAkBC,GACzBA,EAAMC,iBAEN,MAAMC,KAAEA,EAAIC,YAAEA,GAAgBH,EAAMI,cAAcC,SAI5CC,EAAO,CACXC,MAAOL,EAAKM,MACZC,KAAMN,EAAYK,QAyBtB,SAAwBF,GAEtB,MAAMI,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBH,KAAMI,KAAKC,UAAUR,IAGvB,OAAOS,MAAM,6CAA8CL,GAASM,MAClEC,IACE,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAE3B,OAAOH,EAASI,MAAM,G,EArC1BC,CAAehB,GACZU,MAAK,KACJpB,EAAU2B,mBAAmB,YAanC,UAA0BC,GAAEA,EAAEjB,MAAEA,EAAKE,KAAEA,IACrC,MAAO,4BACDF,gBACDE,c,CAhByCgB,CAAiBnB,GAAM,IAElEoB,OAAM,KACL5B,EAAW6B,UAAY,kBAAkB,IAE1CC,SAAQ,KACP/B,EAAY8B,UAAY,GACxBE,YAAW,KACT/B,EAAW6B,UAAY,EAAE,GACxB,IAAK,G,CArCdlC,EAAQqC,iBAAiB,SAEzB,WACEjC,EAAY8B,UAAY,gQAOXjC,SAASC,cAAc,gBAC/BmC,iBAAiB,SAAU/B,E","sources":["src/index.js"],"sourcesContent":["/* для понимания:\n\nhttp/1.1\nзапрос на страницу\nзапрос на стили\nзапрос на стили\n\n*/\n\n/* http/2\n\nзапрос на страницу\nпаралельный запрос на стили и скрипты\n\npostman - запрос на бекенд без написания кода\nSOAP API (более защищенная, тяжело парсится, базируется на формате XML, тяжело сформировать хттп-запрос)\nREST API (максимально быстрая, передаёт данные в формате JSON, но не слишком большие и менее защищённая)\n\n*/\n\n/* \n\nТИПЫ ЗАПРОСОВ\n\nGET - ПОЛУЧЕНИЕ\nPOST - СОЗДАНИЕ\nPUT/PATCH - ОБНОВЛЕНИЕ\nDELETE - УДАЛЕНИЕ\n\n*/\n\n/* \n\nвыбираем эндпоинт https://swapi.dev/api/films/ - (films - это эндпоинт (функция))\nсмотрим на request параметры (прийдут, как параметры функции) - формируется через ?\nесли больше 1 параметра, разделяем знаком &\n*/\n\n/* \n\nКросс-доменные запросы - защита от посторонних запросов\n\nесть домен ресурса: rozetka.com\nвкладка network (отвечает за http-запросы)\nвкладка Headers - referer: домен, с которого уходит запрос на бекенд\nна бекенде есть массив с названиями сайтов, кому можна доверять\nесли сайта нет, будет CORS-ошибка (Request Header -> origin -> error)\n\nPOSTMAN - отдаст, но не факт, что будет работать через fetch.\n*/\n\n//==============\n\n// Пагинация\n\n// const BASE_URL = 'https://the-one-api.dev/v2';\n// const END_POINT = 'character';\n// const KEY = 'pTksQP-kRtSZO_M71kE_';\n\n// function getCharacter() {\n//   const param = new URLSearchParams({\n//     limit: 30,\n//     page: 1,\n//   });\n\n//   //   опция для типа запроса\n//   const option = {\n//     method: 'GET',\n//     headers: {\n//       Authorization: `Bearer ${KEY}`,\n//     },\n//   };\n\n//   fetch(`${BASE_URL}${END_POINT}?${param}`, option).then(response =>\n//     console.log(response)\n//   );\n// }\n\n// getCharacter();\n\n//==============\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\n// const END_POINT = 'trending/movie/day';\n// const API_KEY = '155ac852b40c3d4bc41678b5b0356daa';\n// const list = document.querySelector('.js-list');\n\n// function getTrending() {\n//   fetch(`${BASE_URL}${END_POINT}?api_key=${API_KEY}&page=20`).then(response => {\n//     if (!response.ok) {\n//       throw new Error(response.statusText);\n//     }\n\n//     return response.json();\n//   });\n// }\n\n// getTrending()\n//   .then(data =>\n//     list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//   )\n//   .catch(err => console.log(err));\n\n// function createMarkup(arr) {\n//   return arr\n//     .map(\n//       ({ poster_path, title }) => `<li>\n//     <img  src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\">\n//     <h2>${title}</h2>\n//   </li>`\n//     )\n//     .join('');\n// }\n\n//==============\n\n// CRUD - Create Read Update Delete\n// топ-5 запросов на бекенд\n// json placeholder - api\n\n// R - GET\n// POST (отличие от GET) должен передать какую-то информацию\n// работаем в Postman с вкладкой Body (form-data или raw - струкутура в формате json)\n// должен быть статус 201, в отличии от GET (200)\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1')\n//   .then(response => response.json())\n//   .then(json => console.log(json));\n\n// {\n//   id: 1,\n//   title: '...',\n//   body: '...',\n//   userId: 1\n// }\n\n// C - POST\n\n// опции (строгая структура)\n// body - формат json\n\nconst addPost = document.querySelector('.js-add');\nconst listPosts = document.querySelector('.js-posts');\nconst formWrapper = document.querySelector('.js-form');\nconst errMessage = document.querySelector('.js-error');\n\naddPost.addEventListener('click', handlerAddPost);\n\nfunction handlerAddPost() {\n  formWrapper.innerHTML = `\n  <form action=\"submit\" class=\"js-form-add\" style: \"style=\"display: flex; flex-direction: column\">\n  <input type=\"text\" name=\"name\" />\n  <textarea name=\"description\" type=\"text\" cols=\"30\" rows=\"10\"></textarea>\n  <button>Add Post</button>\n  </form>`;\n\n  const form = document.querySelector('.js-form-add');\n  form.addEventListener('submit', handlerFormSubmit);\n}\n\nfunction handlerFormSubmit(event) {\n  event.preventDefault();\n\n  const { name, description } = event.currentTarget.elements;\n\n  // с функции никогда не отдавать готовый json\n  // строгий образец:\n  const data = {\n    title: name.value,\n    body: description.value,\n  };\n\n  addPostService(data)\n    .then(() => {\n      listPosts.insertAdjacentHTML('beforeend', createPostMarkup(data));\n    })\n    .catch(() => {\n      errMessage.innerHTML = 'Can`t add a post';\n    })\n    .finally(() => {\n      formWrapper.innerHTML = '';\n      setTimeout(() => {\n        errMessage.innerHTML = '';\n      }, 2000);\n    });\n}\n\nfunction createPostMarkup({ id, title, body }) {\n  return `<li data-id=\"id\">\n  <h2>${title}</h2>\n  <p>${body}</p>\n</li>`;\n}\n\nfunction addPostService(data) {\n  // строгий образец:\n  const options = {\n    method: 'POST',\n    headres: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch('https://jsonplaceholder.typicode.com/posts', options).then(\n    response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response.json();\n    }\n  );\n}\n"],"names":["$1f0dc3b9307be026$var$addPost","document","querySelector","$1f0dc3b9307be026$var$listPosts","$1f0dc3b9307be026$var$formWrapper","$1f0dc3b9307be026$var$errMessage","$1f0dc3b9307be026$var$handlerFormSubmit","event","preventDefault","name","description","currentTarget","elements","data","title","value","body","options","method","headres","JSON","stringify","fetch","then","response","ok","Error","statusText","json","$1f0dc3b9307be026$var$addPostService","insertAdjacentHTML","id","$1f0dc3b9307be026$var$createPostMarkup","catch","innerHTML","finally","setTimeout","addEventListener"],"version":3,"file":"index.8e13a8fa.js.map"}