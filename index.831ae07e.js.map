{"mappings":"AAkFA,MAGMA,EAAOC,SAASC,cAAc,kBAGlCC,MAAM,mGAAsDC,MAAKC,IAC/D,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,YAG3B,OAAOH,EAASI,MAAM,KAKvBL,MAAKM,GACJV,EAAKW,mBAAmB,YAA0BD,EAAKE,QAMtDC,KACC,EAACC,YAAEA,EAAWC,MAAEA,KAAY,uDACcD,WAAqBC,gBAC3DA,oBAGLC,KAAK,OAVPC,OAAMC,GAAOC,QAAQC,IAAIF","sources":["src/index.js"],"sourcesContent":["/* для понимания:\n\nhttp/1.1\nзапрос на страницу\nзапрос на стили\nзапрос на стили\n\n*/\n\n/* http/2\n\nзапрос на страницу\nпаралельный запрос на стили и скрипты\n\npostman - запрос на бекенд без написания кода\nSOAP API (более защищенная, тяжело парсится, базируется на формате XML, тяжело сформировать хттп-запрос)\nREST API (максимально быстрая, передаёт данные в формате JSON, но не слишком большие и менее защищённая)\n\n*/\n\n/* \n\nТИПЫ ЗАПРОСОВ\n\nGET - ПОЛУЧЕНИЕ\nPOST - СОЗДАНИЕ\nPUT/PATCH - ОБНОВЛЕНИЕ\nDELETE - УДАЛЕНИЕ\n\n*/\n\n/* \n\nвыбираем эндпоинт https://swapi.dev/api/films/ - (films - это эндпоинт (функция))\nсмотрим на request параметры (прийдут, как параметры функции) - формируется через ?\nесли больше 1 параметра, разделяем знаком &\n*/\n\n/* \n\nКросс-доменные запросы - защита от посторонних запросов\n\nесть домен ресурса: rozetka.com\nвкладка network (отвечает за http-запросы)\nвкладка Headers - referer: домен, с которого уходит запрос на бекенд\nна бекенде есть массив с названиями сайтов, кому можна доверять\nесли сайта нет, будет CORS-ошибка (Request Header -> origin -> error)\n\nPOSTMAN - отдаст, но не факт, что будет работать через fetch.\n*/\n\n//==============\n\n// Пагинация\n\n// const BASE_URL = 'https://the-one-api.dev/v2';\n// const END_POINT = 'character';\n// const KEY = 'pTksQP-kRtSZO_M71kE_';\n\n// function getCharacter() {\n//   const param = new URLSearchParams({\n//     limit: 30,\n//     page: 1,\n//   });\n\n//   //   опция для типа запроса\n//   const option = {\n//     method: 'GET',\n//     headers: {\n//       Authorization: `Bearer ${KEY}`,\n//     },\n//   };\n\n//   fetch(`${BASE_URL}${END_POINT}?${param}`, option).then(response =>\n//     console.log(response)\n//   );\n// }\n\n// getCharacter();\n\n//==============\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst END_POINT = 'trending/movie/day';\nconst API_KEY = '155ac852b40c3d4bc41678b5b0356daa';\nconst list = document.querySelector('.js-list');\n\nfunction getTrending() {\n  fetch(`${BASE_URL}${END_POINT}?api_key=${API_KEY}&page=20`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return response.json();\n  });\n}\n\ngetTrending()\n  .then(data =>\n    list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n  )\n  .catch(err => console.log(err));\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      ({ poster_path, title }) => `<li>\n    <img  src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\">\n    <h2>${title}</h2>\n  </li>`\n    )\n    .join('');\n}\n\n//==============\n"],"names":["$1f0dc3b9307be026$var$list","document","querySelector","fetch","then","response","ok","Error","statusText","json","data","insertAdjacentHTML","results","map","poster_path","title","join","catch","err","console","log"],"version":3,"file":"index.831ae07e.js.map"}